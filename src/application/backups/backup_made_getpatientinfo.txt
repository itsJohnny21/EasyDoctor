package application;

import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.security.InvalidKeyException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Base64;
import java.util.LinkedHashMap;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.SecretKeySpec;

import application.App.User.Role;

public abstract class Database {

    
    public static Connection connection;
    public static Integer userID;
    public static Role role;
    private static String key = "1234561234567890"; //! hide

    public static void connectAs(Role role) throws SQLException {

        if (role == Role.DOCTOR) {
            connection = DriverManager.getConnection("jdbc:mysql://easydoctor.c1wkcaa6ol0w.us-east-2.rds.amazonaws.com:3306/easydoctor?user=doctor&password=doctor123"); //! hide
        } else if (role == Role.NURSE) {
            connection = DriverManager.getConnection("jdbc:mysql://easydoctor.c1wkcaa6ol0w.us-east-2.rds.amazonaws.com:3306/easydoctor?user=nurse&password=nurse123"); //! hide
        } else if (role == Role.PATIENT) {
            connection = DriverManager.getConnection("jdbc:mysql://easydoctor.c1wkcaa6ol0w.us-east-2.rds.amazonaws.com:3306/easydoctor?user=patient&password=patient123"); //! hide
        } else if (role == Role.NEUTRAL) {
            connection = DriverManager.getConnection("jdbc:mysql://easydoctor.c1wkcaa6ol0w.us-east-2.rds.amazonaws.com:3306/easydoctor?user=neutral&password=neutral123"); //! hide
        } else {
            throw new SQLException("Invalid role");
        }

        if (connection == null) {
            throw new SQLException("Connection to the database failed");
        }
        Database.role = role;
    }

    public static void disconnect() throws SQLException, UnknownHostException, NoSuchAlgorithmException, UnsupportedEncodingException, InvalidKeyException, NoSuchPaddingException, IllegalBlockSizeException, BadPaddingException {
        if (connection != null) {
            connection.close();
        }
    }

    public static boolean signIn(String username, String password) throws SQLException, UnknownHostException, NoSuchAlgorithmException, UnsupportedEncodingException, InvalidKeyException, NoSuchPaddingException, IllegalBlockSizeException, BadPaddingException, Exception {
        boolean successful = false;

        PreparedStatement statement = connection.prepareStatement("SELECT ID, username, role FROM users WHERE username = ? AND passwordHash = ? LIMIT 1;");
        statement.setString(1, username);
        statement.setString(2, password);

        ResultSet resultSet = statement.executeQuery();
        successful = resultSet.next();
        
        if (successful) {
            role = Role.valueOf(resultSet.getString("role"));
            userID = resultSet.getInt("ID");

            reconnectAs(role);
            statement = connection.prepareStatement("INSERT INTO logbook (userID, IP, type) VALUES (?, ?, ?);");
            String IP = InetAddress.getLocalHost().getHostAddress();
            
            statement.setInt(1, userID);
            statement.setString(2, IP);
            statement.setString(3, "SIGN_IN");
            statement.executeUpdate();
            System.out.println(username + " signed in");
        }

        return successful;
    }

    public static void reconnectAs(Role role) throws Exception {
        disconnect();
        connectAs(role);
    }

    // public static ResultSet getSelfInfo() throws SQLException {
    //     PreparedStatement statement = connection.prepareStatement("SELECT users.username, users.role, employees.* FROM users JOIN employees ON users.ID = employees.userID WHERE users.ID = ?;");
    // }

    // public static ResultSet getSelfField(String field) throws SQLException {
    //     ResultSet info = getPatientInfo(userID);
    //     // SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMN_PRIVILEGES WHERE TABLE_NAME = 'patients' AND PRIVILEGE_TYPE = 'SELECT' AND GRANTEE = 'doctor'@'host';

    //     if (info == null) {
    //         info = getEmployeeInfo(userID);
    //     }

    //     return info;
    // }

    public static ResultSet getEmployeeInfo(int userID) throws SQLException {
        PreparedStatement statement = connection.prepareStatement("SELECT users.username, users.role, employees.* FROM users JOIN employees ON users.ID = employees.userID WHERE users.ID = ?;");
        statement.setInt(1, userID);

        ResultSet resultSet = statement.executeQuery();

        if (resultSet.next()) {
            return resultSet;
        } else {
            throw new SQLException("Employee not found");
        }
    }

    public static ResultSet getPatientInfo(int userID) throws SQLException{
        PreparedStatement statement = connection.prepareStatement("SELECT users.username, users.role, patients.* FROM users JOIN patients ON users.ID = patients.userID WHERE users.ID = ?;");
        statement.setInt(1, userID);

        ResultSet resultSet = statement.executeQuery();

        if (resultSet.next()) {
            return resultSet;
        } else {
            throw new SQLException("Patient not found");
        }
    }

    public static LinkedHashMap<String, String> getContactInfo() throws Exception {
        LinkedHashMap<String, String> info = new LinkedHashMap<String, String>();
        
        PreparedStatement statement = connection.prepareStatement("SELECT patients.firstName, patients.lastName, patients.sex, patients.birthDate, patients.phone, patients.email, patients.address, users.username, patients.race, patients.ethnicity, patients.emergencyContactName, patients.emergencyContactPhone, patients.motherFirstName, patients.motherLastName, patients.fatherFirstName, patients.fatherLastName FROM patients JOIN users ON users.ID = patients.userID WHERE userID = ?;");
        statement.setInt(1, userID);
        statement.executeQuery();

        ResultSet resultSet = statement.getResultSet();
        resultSet.next();

        info.put("First Name", resultSet.getString("firstName"));
        info.put("Last Name", resultSet.getString("lastName"));
        info.put("Sex", resultSet.getString("sex"));
        info.put("Birth Date", resultSet.getString("birthDate"));
        info.put("Phone", resultSet.getString("phone"));
        info.put("Email", resultSet.getString("email"));
        info.put("Address", resultSet.getString("address"));
        info.put("Username", resultSet.getString("username"));
        info.put("Race", resultSet.getString("race"));
        info.put("Ethnicity", resultSet.getString("Ethnicity"));
        info.put("Emergency Contact Name", resultSet.getString("emergencyContactName"));
        info.put("Emergency Contact Phone", resultSet.getString("emergencyContactPhone"));
        info.put("Mother First Name", resultSet.getString("motherFirstName"));
        info.put("Mother Last Name", resultSet.getString("motherLastName"));
        info.put("Father First Name", resultSet.getString("fatherFirstName"));
        info.put("Father Last Name", resultSet.getString("fatherLastName"));

        // Email: 
        // Address: 123 Test St
        // Sex: OTHER
        // First Name: p1
        // Mother First Name: null
        // Father First Name: null
        // Emergency Contact Phone: null
        // Ethnicity: HISPANIC
        // Father Last Name: null
        // Username: patient1
        // Phone: 1234567890
        // Race: WHITE
        // Mother Last Name: null
        // Birth Date: 2000-01-01
        // Last Name: uhh
        // Emergency Contact Name: null

        return info;
    }

    public static LinkedHashMap<String, String> getContactInfo() throws Exception {
        LinkedHashMap<String, String> info = new LinkedHashMap<String, String>();
        
        PreparedStatement statement = connection.prepareStatement("SELECT patients.firstName, patients.lastName, patients.sex, patients.birthDate, patients.phone, patients.email, patients.address, users.username, patients.race, patients.ethnicity, patients.emergencyContactName, patients.emergencyContactPhone, patients.motherFirstName, patients.motherLastName, patients.fatherFirstName, patients.fatherLastName FROM patients JOIN users ON users.ID = patients.userID WHERE userID = ?;");
        statement.setInt(1, userID);

        ResultSet resultSet = statement.executeQuery();
        resultSet.next();
        ResultSetMetaData metaData = resultSet.getMetaData();

        for (int i =1; i <= metaData.getColumnCount(); i++) {
            info.put(camelCaseToLabel(metaData.getColumnName(i)), resultSet.getString(i));
        }
        
        return info;
    }

    public static String camelCaseToLabel(String camelCase) {
        String label = camelCase.replaceAll("([A-Z])", " $1");
        label = label.substring(0, 1).toUpperCase() + label.substring(1);
        return label;
    }

    public static void signOut() throws SQLException, UnknownHostException, NoSuchAlgorithmException, InvalidKeyException, NoSuchPaddingException, IllegalBlockSizeException, BadPaddingException, Exception {
        PreparedStatement statement = connection.prepareStatement("INSERT INTO logbook (userID, IP, type) VALUES (?, ?, ?);");
        String IP = InetAddress.getLocalHost().getHostAddress();
    
        statement.setInt(1, userID);
        statement.setString(2, IP);
        statement.setString(3, "SIGN_OUT");
        statement.executeUpdate();

        userID = null;
        reconnectAs(Role.NEUTRAL);
    }

    public static String SHA256(String input) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md = MessageDigest.getInstance("SHA-256");
        md.update(input.getBytes("UTF-8"));
        byte[] digest = md.digest();
        return String.format("%064x", new BigInteger(1, digest));
    }

    public static String encrypt(String input) throws NoSuchAlgorithmException, InvalidKeyException, NoSuchPaddingException, IllegalBlockSizeException, BadPaddingException {
        SecretKeySpec skeySpec = new SecretKeySpec(key.getBytes(), "AES");
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);

        byte[] encrypted = cipher.doFinal(input.getBytes());
        String ecnryptedString = Base64.getEncoder().encodeToString(encrypted);
        return ecnryptedString;
    }
}